version: 2.1

commands:
  revert-migrations:
    description: Revert the latest migration
    steps:
      - run:
          name: Get the public DNS of EC2 instance from https://memstash.io/
          command: |
            bin/rake db:rollback STEP=1
          when: on_fail
parameters:
  circleci_image:
    type: string
    default: ruby:2.4.1
  py_alp_image:
    type: string
    default: python:3.7-alpine3.11
            
jobs:
  build:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - restore_cache:
          keys: [build]
      - run:
          name: install dependencies for front-end
          command: |
            ls -l
            pwd
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Installl dependencies
          command: |
            curl -sL https://deb.nodesource.com/setup_10.x | bash -
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \
            && echo 'deb http://dl.yarnpkg.com/debian/ stable main' > /etc/apt/sources.list.d/yarn.list
            apt-get update -qq && DEBIAN_FRONTEND=noninteractive apt-get -yq dist-upgrade && \
            DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
            build-essential \
            nodejs \
            yarn && \
            apt-get clean && \
            rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
            truncate -s 0 /var/log/*log
      - run:
          name: Bundle and Yarn Installation 
          command: |
            bundle install && yarn install
      - save_cache:
          paths: [node_modules]
          key: build

  lint:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - restore_cache:
          keys: [build]
      - run:
          name: Check for syntax errors - "linting"
          command: |
            gem install roodi
            ruby -c config/application.rb
            roodi config/application.rb
            echo "There is no syntax error, Great!"
  docker-build:
    machine: true
    steps:
      - checkout
      # start proprietary DB using private Docker image
      # with credentials stored in the UI
      - run: |
          echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
          # docker run -d --name db company/proprietary-db:1.2.3
      # build the application image
      - run: docker build -t muhammadyasser/ruby-udacity:latest .
      - run: docker images
      - run: docker push muhammadyasser/ruby-udacity:latest

  migrations:
    docker:
      - image: muhammadyasser/timestack-builder:latest
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
             cp -r /app/node_modules .
             chmod -R +x bin
             bundle install
             echo $DATABASE_USER
            #  bin/rake db:rollback STEP=1
            #  bin/rails db:migrate RAILS_ENV=development
            #  bin/rails db:seed
             
      # - run:
      #     name: Run database seed
      #     command: |
      #        bin/rails db:seed


  test-circleci:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: install aws cli
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Install K8s dependencies
          command: |
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            aws-iam-authenticator help
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: aws provisioning
          command: |
            AWS_VALIDATION=$(aws cloudformation list-exports --query "Exports[?Name=='eksctl-${EKS_CLUSTER_NAME}-cluster::ARN'].Value" --output text)
            if [[ "${AWS_VALIDATION}" = "None" ]] 
            then 
              eksctl create cluster --name udacity \
              --nodegroup-name workers \
              --node-type t2.medium \
              --nodes 2 \
              --nodes-min 1 \
              --nodes-max 3 \
              --node-ami auto \
              --region us-west-2 
            fi
            sleep 2m
  deployment:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: install aws cli
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Install K8s dependencies
          command: |
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
            AWS_VALIDATION=$(aws cloudformation list-exports --query "Exports[?Name=='eksctl-${EKS_CLUSTER_NAME}-cluster::ARN'].Value" --output text)
            aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME}
            kubectl config use-context ${AWS_VALIDATION}
      - run: 
          name: deploy and rollout
          command: |
            kubectl get pods
            kubectl get deployments
            kubectl apply -f deployment.yml
            kubectl rollout restart deployments/time-stack-prod
            kubectl get svc
            kubectl get services -o wide
            URLS=$(kubectl get services -o wide)
            echo $URLS
      - run: 
          name: verify new deployment success 
          command: |
            URL=$(kubectl get svc simple-web-app -o jsonpath="{.status.loadBalancer.ingress[*].hostname}")
            curl ${URL}:8080

workflows:
  build:
    jobs:
      # - build
      #     filters:
      #       branches:
      #         ignore: master
      # - test:
      #     requires: [build]
      #     filters:
      #       branches:
      #         ignore: master
      # - docker-build
          # requires: [build-frontend]
          # filters:
          #   branches:
          #     ignore: master
      # - migrations
          # requires:
          #   - "docker-build"
      # - test-circleci

